---
description: Pipeline for parsing Box Events
processors:
  - set:
      field: ecs.version
      value: "8.3.0"
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: box
  - date:
      field: box.recorded_at
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
  - rename:
      field: box.session_id
      target_field: box.session.id
      ignore_missing: true
# `box.type` is always `event` - remove to avoid ambiguity with `event.kind`
  - remove:
      field: box.type
      ignore_missing: true
  - set:
      field: event.kind
      value: "event"
      if: "ctx?.box?.source != null"
      ignore_failure: true
  - set:
      field: event.kind
      value: "alert"
      if: "ctx?.box?.additional_details?.shield_alert != null"
      ignore_failure: true
  - rename:
      field: box.created_by.type
      target_field: event.type
      ignore_missing: true
  - rename:
      field: box.event_type
      target_field: event.action
      ignore_missing: true
  - rename:
      field: box.event_id
      target_field: event.id
      ignore_missing: true
# If a user or item triggers an event, The response of the GET /events endpoint contains an event source object.
  - convert:
      field: box.source.sequence_id
      target_field: event.sequence
      type: integer
      ignore_missing: true
  - rename:
      field: box.source.type
      target_field: file.type
      ignore_missing: true
  - rename:
      if: ctx?.file?.type != "folder"
      field: box.source.name
      target_field: file.name
      ignore_missing: true
  - rename:
      if: ctx?.file?.type == "folder"
      field: box.source.name
      target_field: file.directory
      ignore_missing: true
  - date:
      field: box.source.created_at
      target_field: file.created
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
  - remove:
      field: box.source.created_at
      ignore_missing: true
  - date:
      field: box.source.content_created_at
      target_field: file.created
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
  - remove:
      field: box.source.content_created_at
      ignore_missing: true
  - date:
      field: box.source.content_modified_at
      target_field: file.mtime
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
  - remove:
      field: box.source.content_modified_at
      ignore_missing: true
  - date:
      field: box.source.modified_at
      target_field: file.ctime
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
  - rename:
      field: box.source.size
      target_field: file.size
      ignore_missing: true
  - rename:
      field: box.source.file_version.sha1
      target_field: file.hash.sha1
      ignore_missing: true
# Box Shield can add these fields 
  - rename:
      field: box.ip_address
      target_field: client.ip
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.risk_score
      target_field: event.risk_score
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.city_name
      target_field: threat.indicator.geo.city_name
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.country_code
      target_field: threat.indicator.geo.country_iso_code
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.latitude
      target_field: threat.indicator.geo.location.lat
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.longitude
      target_field: threat.indicator.geo.location.lon
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.region_name
      target_field: threat.indicator.geo.region_name
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.link
      target_field: threat.indicator.reference
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.rule_category
      target_field: rule.category
      ignore_missing: true
  - convert:
      field: box.additional_details.shield_alert.rule_id
      type: string
      target_field: rule.id
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.rule_id
      ignore_failure: true
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.rule_name
      target_field: rule.name
      ignore_missing: true
  - convert:
      field: box.additional_details.shield_alert.alert_id
      type: string
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.alert_summary.description
      target_field: threat.indicator.description
      ignore_missing: true
#  - date:
#      field: box.additional_details.shield_alert.created_at
#      target_field: threat.enrichments.matched.occurred
#      ignore_failure: true
#      formats:
#        - yyyy-MM-dd'T'hh:mm:ssXXX
  - rename:
      field: box.additional_details.shield_alert.user.email
      target_field: user.effective.email
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.user.name
      target_field: user.effective.name
      ignore_missing: true
  - convert:
      field: box.additional_details.shield_alert.user.id
      type: string
      target_field: user.effective.id
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.user.id
      ignore_failure: true
      ignore_missing: true
#
  - script:
      description: Prepare intervening objects for subsequent scripts
      lang: painless
      source: |
        if (ctx.box?.additional_details != null) {
            if (ctx?.threat == null) {
                ctx.threat = new HashMap();
            }
            if (ctx?.threat?.enrichments == null) {
                ctx.threat.enrichments = new ArrayList();
            }
            if (ctx?.threat?.indicator == null) {
                ctx.threat.indicator = new HashMap();
            }
        }
#
  - script:
      description: Unpack Suspicious sessions property within array of object within array of object
      lang: painless
      source: |
        if (ctx.box?.additional_details?.shield_alert?.alert_summary?.sessions != null) {
            List l = new ArrayList();
            for (session in ctx.box.additional_details.shield_alert.alert_summary.sessions) {
                for (activity in session?.activities) {
                l.add(activity.ip_info.ip);
                }
            }
            List setList = new ArrayList(new HashSet(l));
            if (ctx?.related == null) {
                ctx.related = new HashMap();
            }
            ctx.related.ip = setList;
        }
#
  - script:
      description: Unpack Suspicious locations properties
      lang: painless
      source: |
        if (ctx.rule?.name != null && ctx.rule.name.equals("Suspicious Location")) {
            Map indicator = new HashMap();
            for (alert_activity in ctx.box.additional_details.shield_alert.alert_summary.alert_activities) {
                Map location = new HashMap();
                location.put("lon",alert_activity.ip_info.longitude);
                location.put("lat",alert_activity.ip_info.latitude);
                Map geo = new HashMap();
                geo.put("ip",alert_activity.ip_info.ip);
                geo.put("location",location);
                indicator.put("geo",geo);
                indicator.put("description",
                    "IP " + alert_activity.ip_info.ip + " was observed to " +
                    alert_activity.event_type + " " + alert_activity.item_type + " " +
                    alert_activity.item_path + "/" + alert_activity.item_name + " by " +
                    alert_activity.service_name);
                indicator.put("provider",alert_activity.service_name);
                if (alert_activity.ip_info.ip.indexOf(":") > -1) {
                    indicator.put("type","ipv6-addr");    
                } else { 
                    indicator.put("type","ipv4-addr");   
                }  
            }
            ctx.threat.enrichments.add(indicator)
        }
  - remove:
      field: 
        - box.additional_details.shield_alert.alert_summary.alert_activities
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Capitalize Priority to match Appendix A of the STIX 2.1 framework
      lang: painless
      source: |
        if (ctx.box?.additional_details?.shield_alert?.priority != null) {
            ctx.threat.indicator.confidence = 
                ctx.box.additional_details.shield_alert.priority.substring(0, 1).toUpperCase() + 
                ctx.box.additional_details.shield_alert.priority.substring(1);
        }
# already have ip in `client.ip`
  - remove:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.ip
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.registrant
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.alert_summary.sessions
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.priority
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.created_at
      ignore_failure: true
      ignore_missing: true
# Conditionally, remove event.original
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
# Drop empty/null fields
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
