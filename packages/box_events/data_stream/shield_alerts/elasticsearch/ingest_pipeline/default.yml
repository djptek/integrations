---
description: Pipeline for parsing Box Anomalous Download Alerts
# pre scripted processors 
processors:
  - set:
      field: ecs.version
      value: "8.4.0"
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: box
  - date:
      field: box.recorded_at
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
      if: "ctx.box?.source != null"
  - rename:
      field: box.session_id
      target_field: box.session.id
      ignore_missing: true
# `box.type` is always `event` - remove to avoid ambiguity with `event.kind`
  - remove:
      field: box.type
      ignore_missing: true
  - set:
      field: event.kind
      value: "event"
      if: "ctx.box?.source != null"
      ignore_failure: true
  - set:
      field: event.kind
      value: "alert"
      if: "ctx.box?.additional_details?.shield_alert != null"
      ignore_failure: true
  - rename:
      field: box.event_type
      target_field: event.action
      ignore_missing: true
  - rename:
      field: box.event_id
      target_field: event.id
      ignore_missing: true
# Box Shield can add these fields 
  - date:
      field: box.additional_details.shield_alert.alert_summary.historical_period.date_range.start_date
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - yyyy-MM-dd'T'hh:mm:ssXXX
  - rename:
      field: box.ip_address
      target_field: client.ip
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.risk_score
      target_field: event.risk_score
      ignore_missing: true
  - rename:
      field: ctx.box.additional_details.shield_alert.alert_summary.historical_period.downloaded_files_count
      target_field: threat.indicator.sightings
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.rule_category
      target_field: rule.category
      ignore_missing: true
  - convert:
      field: box.additional_details.shield_alert.rule_id
      type: string
      target_field: rule.id
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.rule_id
      ignore_failure: true
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.rule_name
      target_field: rule.name
      ignore_missing: true
  - convert:
      field: box.additional_details.shield_alert.alert_id
      type: string
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.user.email
      target_field: user.effective.email
      ignore_missing: true
  - rename:
      field: box.additional_details.shield_alert.user.name
      target_field: user.effective.name
      ignore_missing: true
  - convert:
      field: box.additional_details.shield_alert.user.id
      type: string
      target_field: user.effective.id
      ignore_missing: true
  - remove:
      field: box.additional_details.shield_alert.user.id
      ignore_failure: true
      ignore_missing: true
  - append:
      field: related.user
      value: "{{{user.effective.email}}}"
      ignore_failure: true
      allow_duplicates: false
  - append:
      field: related.user
      value: "{{{user.effective.id}}}"
      ignore_failure: true
      allow_duplicates: false
  - append:
      field: related.user
      value: "{{{user.effective.name}}}"
      ignore_failure: true
      allow_duplicates: false
# script processors to unpack the 4 box shield event formats
#
  - script:
      description: Prepare intervening objects for subsequent scripts
      lang: painless
      source: |
        if (ctx.box?.additional_details != null) {
            if (ctx?.threat == null) {
                ctx.threat = new HashMap();
            }
            if (ctx?.event == null) {
                ctx.event = new HashMap();
            }
            ctx.event.category = new ArrayList();
            ctx.event.category.add("threat");
            ctx.event.type = new ArrayList();
            ctx.event.type.add("indicator");
        }
#
  - script:
      description: Unpack Suspicious sessions property within array of object within array of object
      lang: painless
      source: |
        if (ctx.rule?.category != null && ctx.rule.category.equals("Suspicious Sessions")) {
            ctx.event.category.add("network");
            ctx.event.type.add("access");
            ctx.event.type.add("connection");
            if (ctx?.threat?.enrichments == null) {
                ctx.threat.enrichments = new ArrayList();
            }
            List l = new ArrayList();
            for (session in ctx.box.additional_details.shield_alert.alert_summary.sessions) {
                for (activity in session?.activities) {
                    l.add(activity.ip_info.ip);
                    if (session.session_type.equals("suspicious")) {
                        Map indicator = new HashMap();
                        indicator.indicator = new HashMap();
                        Map location = new HashMap();
                        location.put("lon",activity.ip_info.longitude);
                        location.put("lat",activity.ip_info.latitude);
                        Map geo = new HashMap();
                        geo.put("ip",activity.ip_info.ip);
                        geo.put("location",location);
                        indicator.indicator.put("geo",geo);
                        indicator.indicator.put("description",
                            "IP " + activity.ip_info.ip + " was observed to " +
                            activity.event_type + " " + activity.item_type + " " +
                            activity.item_path + "/" + activity.item_name + " by " +
                            activity.service_name);
                        indicator.indicator.put("provider",activity.service_name);
                        indicator.indicator.put("type","user-account");    
                        ctx.threat.enrichments.add(indicator)
                    }
                }
            }
            List setList = new ArrayList(new HashSet(l));
            if (ctx?.related == null) {
                ctx.related = new HashMap();
            }
            ctx.related.ip = setList;
        }
#
  - script:
      description: Unpack Suspicious locations properties
      lang: painless
      source: |
        if (ctx.rule?.category != null && ctx.rule.category.equals("Suspicious Locations")) {
            ctx.event.category.add("network");
            ctx.event.type.add("access");
            ctx.event.type.add("connection");
            if (ctx?.threat?.enrichments == null) {
                ctx.threat.enrichments = new ArrayList();
            }
            for (alert_activity in ctx.box.additional_details.shield_alert.alert_summary.alert_activities) {
                Map indicator = new HashMap();
                indicator.indicator = new HashMap();
                Map location = new HashMap();
                location.put("lon",alert_activity.ip_info.longitude);
                location.put("lat",alert_activity.ip_info.latitude);
                Map geo = new HashMap();
                geo.put("ip",alert_activity.ip_info.ip);
                geo.put("location",location);
                indicator.indicator.put("geo",geo);
                indicator.indicator.put("description",
                    "IP " + alert_activity.ip_info.ip + " was observed to " +
                    alert_activity.event_type + " " + alert_activity.item_type + " " +
                    alert_activity.item_path + "/" + alert_activity.item_name + " by " +
                    alert_activity.service_name);
                indicator.indicator.put("provider",alert_activity.service_name);
                if (alert_activity.ip_info.ip.indexOf(":") > -1) {
                    indicator.indicator.put("type","ipv6-addr");    
                } else { 
                    indicator.indicator.put("type","ipv4-addr");   
                }  
                ctx.threat.enrichments.add(indicator)
            }
        }
  - remove:
      field: 
        - box.additional_details.shield_alert.alert_summary.alert_activities
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Unpack Anomalous Download properties
      lang: painless
      source: |
        if (ctx.rule?.category != null && ctx.rule.category.equals("Anomalous Download")) {
            ctx.event.category.add("file");
            ctx.event.type.add("access");
            if (ctx?.threat?.enrichments == null) {
                ctx.threat.enrichments = new ArrayList();
            }
            List l = new ArrayList();
            for (ip in ctx.box.additional_details.shield_alert.alert_summary.download_ips) {
                l.add(ip.ip);
                Map indicator = new HashMap();
                indicator.indicator = new HashMap();
                indicator.indicator.ip = ip.ip;
                indicator.indicator.description = ctx.box.additional_details.shield_alert.alert_summary.description;
                indicator.indicator.first_seen = ctx.box.additional_details.shield_alert.alert_summary.anomaly_period.date_range.start_date;
                indicator.indicator.last_seen = ctx.box.additional_details.shield_alert.alert_summary.anomaly_period.date_range.end_date;
                indicator.indicator.sightings = ctx.box.additional_details.shield_alert.alert_summary.historical_period.downloaded_files_count;
                indicator.indicator.type = "file";
                ctx.threat.enrichments.add(indicator);
            }
            List setList = new ArrayList(new HashSet(l));
            if (ctx?.related == null) {
                ctx.related = new HashMap();
            }
            ctx.related.ip = setList;
        }
  - script:
      description: Unpack Malicious Content properties
      lang: painless
      source: |
        if (ctx.rule?.category != null && ctx.rule.category.equals("Malicious Content")) {
            ctx.event.category.add("malware");
            if (ctx?.threat?.indicator == null) {
                ctx.threat.indicator = new HashMap();
            }
            ctx.threat.indicator.description = 
                    ctx.box.additional_details.shield_alert.malware_info.malware_name +
                    ", " + ctx.box.additional_details.shield_alert.malware_info.family +
                    ", " + ctx.box.additional_details.shield_alert.malware_info.file_name +
                    " Detected by Box Shield from IP " + ctx.box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.ip +
                    ". " + ctx.box.additional_details.shield_alert.malware_info.description +
                    " see " + ctx.box.additional_details.shield_alert.malware_info.detail_link;
            ctx.threat.indicator.ip = ctx.box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.ip;
            ctx.threat.indicator.provider = ctx.box.additional_details.shield_alert.alert_summary.upload_activity.service_name;
            ctx.threat.indicator.type = "software";
            ctx.threat.indicator.first_seen = ctx.box.additional_details.shield_alert.malware_info.first_seen;
            ctx.threat.indicator.last_seen = ctx.box.additional_details.shield_alert.malware_info.last_seen;
            ctx.threat.indicator.reference = ctx.box.additional_details.shield_alert.malware_info.detail_link;
        }
# post-script processors dependent on outcome of scripts, or append to fields
# created by scripts
  - append:
      field: related.ip
      value: "{{{threat.indicator.ip}}}"
      ignore_failure: true
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{client.ip}}}"
      ignore_failure: true
      allow_duplicates: false
# remove fields remapped by scripts
  - remove:
      field: 
        - box.additional_details.shield_alert.alert_summary.anomaly_period.date_range.end_date
        - box.additional_details.shield_alert.alert_summary.anomaly_period.date_range.start_date
        - box.additional_details.shield_alert.alert_summary.description
        - box.additional_details.shield_alert.alert_summary.sessions
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.city_name
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.country_code
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.ip
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.latitude
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.longitude
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.region_name
        - box.additional_details.shield_alert.alert_summary.upload_activity.ip_info.registrant
        - box.additional_details.shield_alert.alert_summary.upload_activity.service_name
        - box.additional_details.shield_alert.created_at
        - box.additional_details.shield_alert.link
        - box.additional_details.shield_alert.malware_info.detail_link
        - box.additional_details.shield_alert.malware_info.first_seen
        - box.additional_details.shield_alert.malware_info.last_seen
        - box.additional_details.shield_alert.priority
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Capitalize Priority to match Appendix A of the STIX 2.1 framework
      lang: painless
      source: |
        if (ctx.box?.additional_details?.shield_alert?.priority != null) {
            ctx.threat.indicator.confidence = 
                ctx.box.additional_details.shield_alert.priority.substring(0, 1).toUpperCase() + 
                ctx.box.additional_details.shield_alert.priority.substring(1);
        }
# geo
  - foreach:
      field: threat.enrichments
      ignore_missing: true
      processor:
        geoip:
          field: "_ingest._value.indicator.ip"
          target_field: "_ingest._value.indicator.geo"
          ignore_missing: true
  - geoip: 
      field: threat.indicator.ip
      target_field: threat.indicator.geo
      ignore_missing: true
# AS look-ups on enrichments within Array
  - foreach:
      field: threat.enrichments
      ignore_missing: true
      processor:
        geoip:
          database_file: GeoLite2-ASN.mmdb
          field: "_ingest._value.indicator.ip"
          target_field: "_ingest._value.indicator.as"
          properties:
            - asn
            - organization_name
          ignore_missing: true
  - foreach:
      field: threat.enrichments
      ignore_missing: true
      processor:
        rename:
          field: "_ingest._value.indicator.as.asn"
          target_field: "_ingest._value.indicator.as.number"
          ignore_missing: true
  - foreach:
      field: threat.enrichments
      ignore_missing: true
      processor:
        rename:
          field: "_ingest._value.indicator.as.organization_name"
          target_field: "_ingest._value.indicator.as.organization.name"
          ignore_missing: true
# AS lookup for stand-alone indicator 
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: threat.indicator.ip
      target_field: threat.indicator.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: threat.indicator.as.asn
      target_field: threat.indicator.as.number
      ignore_missing: true
  - rename:
      field: threat.indicator.as.organization_name
      target_field: threat.indicator.as.organization.name
      ignore_missing: true
# Conditionally, remove event.original
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
# Drop empty/null fields
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
